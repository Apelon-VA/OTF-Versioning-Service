If you compare the refex package with the refex2 package, you will see the following changes:

1) all of the "type_*" code goes away

2) the "data" package is new - it contains the new interfaces for the supported data types that can be stored in a refex data column.
    a) RefexDataType is similar in style to the old "RefexType" class - but now, it is used per column of data in a refex, rather than the refex type itself.

3) in RefexAnalogBI:
    a) Removed deprecated methods
    b) added the following methods:
        void setRefexUsageDescriptorNid(int refexUsageDescriptorNid);
            Used to point to the concept that contains the descriptions and column definitions for this refex member
            
        void setData(RefexDataBI[] data) throws PropertyVetoException;
            Used to store data columns that are attached to this refex member
            
        void setData(int columnNumber, RefexDataBI data) throws IndexOutOfBoundsException, PropertyVetoException;
            Convenience method for setting individual data columns
            
4) in RefexChroniceBI
    a) Removed deprecated methods
    b) added the following methods:
        int getRefexUsageDescriptorNid();
            Return the nid of the concept that contains the descriptions and column definitions for this refex member
        
        RefexUsageDescriptionBI getRefexUsageDescription();
            A convenience method that decodes the descriptions and column definitions from the method above, and returns it in a concise object
        
        RefexDataBI[] getData();
            Return all of the data columns attached to this refex (if any)
        
        RefexDataBI getData(int columnNumber) throws IndexOutOfBoundsException;
            A convenience method to get a specific data column 

5) RefexUsageDescriptionBI / ColumnInfoBI
        interfaces that represent the refex description / column definitions
        
        
Discussion points:
    The get/set RefexUsageDescriptorNid method could be removed, if we want to store the refex description information directly on the refex concept
    (the concept represented by AssemblageNid) - but perhaps we don't want to put that directly on the concept, and would rather have a metadata style
    concept that only exists to store the usage descriptions.
    
    Still need to figure out if we need to define the refexUsageDescriptor concept from scratch, or whether the SCT TIG provides a mechanism that can store
    everything that we need.